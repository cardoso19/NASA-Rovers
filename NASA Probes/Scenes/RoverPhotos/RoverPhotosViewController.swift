//
//  RoverPhotosViewController.swift
//  NASA Probes
//
//  Created by Matheus Cardoso kuhn on 19/04/19.
//  Copyright (c) 2019 MDT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RoverPhotosDisplayLogic: AnyObject {
    func refreshCollectionView()
    func displayPhoto(viewModel: RoverPhotos.Image.ViewModel)
    func display(error: Error)
}

class RoverPhotosViewController: UIViewController {
    var interactor: (RoverPhotosBusinessLogic & RoverPhotosDataStore)?
    var router: (NSObjectProtocol & RoverPhotosRoutingLogic & RoverPhotosDataPassing)?
    var previousSelectedRover: Int = 0

    //MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = RoverPhotosInteractor()
        let presenter = RoverPhotosPresenter()
        let router = RoverPhotosRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        requestForRoverPhotos()
    }

    //MARK: - IBOutlets
    @IBOutlet weak var segmentedControlRover: UISegmentedControl!
    @IBOutlet weak var collectionViewPhotos: UICollectionView!

    //MARK: - IBActions
    @IBAction func actionChangeSelectedRover(_ sender: Any) {
        if previousSelectedRover != segmentedControlRover.selectedSegmentIndex {
            requestForRoverPhotos()
        }
    }
    
    //MARK: - Request
    func requestForRoverPhotos() {
        guard let roverId = RoverId(rawValue: segmentedControlRover.selectedSegmentIndex) else { return }
        previousSelectedRover = segmentedControlRover.selectedSegmentIndex
        let request = RoverPhotos.Data.Request(roverName: roverId.name, date: Date())
        interactor?.doRequestPhotos(request: request)
    }
}

//MARK: - RoverPhotosDisplayLogic
extension RoverPhotosViewController: RoverPhotosDisplayLogic {
    func displayPhoto(viewModel: RoverPhotos.Image.ViewModel) {
        guard let cell = collectionViewPhotos.cellForItem(at: viewModel.indexPath) as? PhotoCollectionViewCell else { return }
        cell.imageViewPhoto.image = viewModel.image
    }
    
    func refreshCollectionView() {
        collectionViewPhotos.reloadData()
    }
    
    func display(error: Error) {
        let alertController = UIAlertController(title: "Error", message: error.localizedDescription, preferredStyle: .alert)
        let actionOk = UIAlertAction(title: "Ok", style: .default, handler: nil)
        alertController.addAction(actionOk)
        present(alertController, animated: true, completion: nil)
    }
}

//MARK: - UICollectionViewDataSource
extension RoverPhotosViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return interactor?.photos?.count ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "photo", for: indexPath) as? PhotoCollectionViewCell else { fatalError("Error trying to create a photo cell") }
        guard let data = interactor?.photos?[indexPath.row] else { fatalError("Error trying get data to populate cell") }
        interactor?.downloadPhoto(on: data.imgSrc, to: indexPath)
        return cell
    }
}
